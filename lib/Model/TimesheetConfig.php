<?php
/**
 * TimesheetConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kimai - API
 *
 * JSON API for the Kimai time-tracking software. Read our [API documentation](https://www.kimai.org/documentation/rest-api.html) and download the [Open API definition](doc.json) to import into your API client.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.64
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TimesheetConfig Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TimesheetConfig implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TimesheetConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'tracking_mode' => 'string',
        'default_begin_time' => 'string',
        'active_entries_hard_limit' => 'int',
        'is_allow_future_times' => 'bool',
        'is_allow_overlapping' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'tracking_mode' => null,
        'default_begin_time' => null,
        'active_entries_hard_limit' => null,
        'is_allow_future_times' => null,
        'is_allow_overlapping' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tracking_mode' => 'trackingMode',
        'default_begin_time' => 'defaultBeginTime',
        'active_entries_hard_limit' => 'activeEntriesHardLimit',
        'is_allow_future_times' => 'isAllowFutureTimes',
        'is_allow_overlapping' => 'isAllowOverlapping'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tracking_mode' => 'setTrackingMode',
        'default_begin_time' => 'setDefaultBeginTime',
        'active_entries_hard_limit' => 'setActiveEntriesHardLimit',
        'is_allow_future_times' => 'setIsAllowFutureTimes',
        'is_allow_overlapping' => 'setIsAllowOverlapping'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tracking_mode' => 'getTrackingMode',
        'default_begin_time' => 'getDefaultBeginTime',
        'active_entries_hard_limit' => 'getActiveEntriesHardLimit',
        'is_allow_future_times' => 'getIsAllowFutureTimes',
        'is_allow_overlapping' => 'getIsAllowOverlapping'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['tracking_mode'] = isset($data['tracking_mode']) ? $data['tracking_mode'] : null;
        $this->container['default_begin_time'] = isset($data['default_begin_time']) ? $data['default_begin_time'] : null;
        $this->container['active_entries_hard_limit'] = isset($data['active_entries_hard_limit']) ? $data['active_entries_hard_limit'] : null;
        $this->container['is_allow_future_times'] = isset($data['is_allow_future_times']) ? $data['is_allow_future_times'] : null;
        $this->container['is_allow_overlapping'] = isset($data['is_allow_overlapping']) ? $data['is_allow_overlapping'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tracking_mode
     *
     * @return string
     */
    public function getTrackingMode()
    {
        return $this->container['tracking_mode'];
    }

    /**
     * Sets tracking_mode
     *
     * @param string $tracking_mode tracking_mode
     *
     * @return $this
     */
    public function setTrackingMode($tracking_mode)
    {
        $this->container['tracking_mode'] = $tracking_mode;

        return $this;
    }

    /**
     * Gets default_begin_time
     *
     * @return string
     */
    public function getDefaultBeginTime()
    {
        return $this->container['default_begin_time'];
    }

    /**
     * Sets default_begin_time
     *
     * @param string $default_begin_time default_begin_time
     *
     * @return $this
     */
    public function setDefaultBeginTime($default_begin_time)
    {
        $this->container['default_begin_time'] = $default_begin_time;

        return $this;
    }

    /**
     * Gets active_entries_hard_limit
     *
     * @return int
     */
    public function getActiveEntriesHardLimit()
    {
        return $this->container['active_entries_hard_limit'];
    }

    /**
     * Sets active_entries_hard_limit
     *
     * @param int $active_entries_hard_limit active_entries_hard_limit
     *
     * @return $this
     */
    public function setActiveEntriesHardLimit($active_entries_hard_limit)
    {
        $this->container['active_entries_hard_limit'] = $active_entries_hard_limit;

        return $this;
    }

    /**
     * Gets is_allow_future_times
     *
     * @return bool
     */
    public function getIsAllowFutureTimes()
    {
        return $this->container['is_allow_future_times'];
    }

    /**
     * Sets is_allow_future_times
     *
     * @param bool $is_allow_future_times is_allow_future_times
     *
     * @return $this
     */
    public function setIsAllowFutureTimes($is_allow_future_times)
    {
        $this->container['is_allow_future_times'] = $is_allow_future_times;

        return $this;
    }

    /**
     * Gets is_allow_overlapping
     *
     * @return bool
     */
    public function getIsAllowOverlapping()
    {
        return $this->container['is_allow_overlapping'];
    }

    /**
     * Sets is_allow_overlapping
     *
     * @param bool $is_allow_overlapping is_allow_overlapping
     *
     * @return $this
     */
    public function setIsAllowOverlapping($is_allow_overlapping)
    {
        $this->container['is_allow_overlapping'] = $is_allow_overlapping;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
